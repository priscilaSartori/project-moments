{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MomentService {\n  constructor(http) {\n    this.http = http;\n    this.baseApiUrl = environment.baseApiUrl;\n    this.apiRrl = `${this.baseApiUrl}api/moments`;\n  }\n  getMoments() {\n    return this.http.get(this.apiRrl);\n  }\n  getMoment(id) {\n    const url = `${this.apiRrl}/${id}`;\n    return this.http.get(url);\n  }\n  createMoment(formData) {\n    return this.http.post(this.apiRrl, formData);\n  }\n  removeMoment(id) {\n    const url = `${this.apiRrl}/${id}`;\n    return this.http.delete(url);\n  }\n  updateMoment(id, formData) {\n    const url = `${this.apiRrl}/${id}`;\n    return this.http.put(url, formData);\n  }\n}\nMomentService.ɵfac = function MomentService_Factory(t) {\n  return new (t || MomentService)(i0.ɵɵinject(i1.HttpClient));\n};\nMomentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MomentService,\n  factory: MomentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","MomentService","constructor","http","baseApiUrl","apiRrl","getMoments","get","getMoment","id","url","createMoment","formData","post","removeMoment","delete","updateMoment","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/priscila/Documentos/project-moments/moments/src/app/services/moment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n// Observable é uma técnica que lida com compartilhamento de dados, é muito usado no Angular e pode ser considerado uma versão melhor de uma promise.\nimport { Moment } from '../interface/Moment';\nimport { environment } from 'src/environments/environment';\nimport { Response } from '../interface/Response';\n@Injectable({\n  providedIn: 'root'\n})\nexport class MomentService {\n  private baseApiUrl = environment.baseApiUrl\n  private apiRrl = `${this.baseApiUrl}api/moments`\n\n  constructor(private http: HttpClient) { }\n\n  getMoments(): Observable<Response<Moment[]>> {\n    return this.http.get<Response<Moment[]>>(this.apiRrl)\n  }\n\n  getMoment(id: number): Observable<Response<Moment>> {\n    const url = `${this.apiRrl}/${id}`\n    return this.http.get<Response<Moment>>(url)\n  }\n\n  createMoment(formData: FormData): Observable<FormData> {\n    return this.http.post<FormData>(this.apiRrl, formData);\n  }\n\n  removeMoment(id: number) {\n    const url = `${this.apiRrl}/${id}`\n    return this.http.delete(url)\n  }\n\n  updateMoment(id: number, formData: FormData): Observable<FormData> {\n    const url = `${this.apiRrl}/${id}`\n    return this.http.put<FormData>(url, formData);\n  }\n}\n"],"mappings":"AAKA,SAASA,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,UAAU,GAAGJ,WAAW,CAACI,UAAU;IACnC,KAAAC,MAAM,GAAG,GAAG,IAAI,CAACD,UAAU,aAAa;EAER;EAExCE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAqB,IAAI,CAACF,MAAM,CAAC;EACvD;EAEAG,SAASA,CAACC,EAAU;IAClB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAmBG,GAAG,CAAC;EAC7C;EAEAC,YAAYA,CAACC,QAAkB;IAC7B,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAW,IAAI,CAACR,MAAM,EAAEO,QAAQ,CAAC;EACxD;EAEAE,YAAYA,CAACL,EAAU;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACN,IAAI,CAACY,MAAM,CAACL,GAAG,CAAC;EAC9B;EAEAM,YAAYA,CAACP,EAAU,EAAEG,QAAkB;IACzC,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,EAAE,EAAE;IAClC,OAAO,IAAI,CAACN,IAAI,CAACc,GAAG,CAAWP,GAAG,EAAEE,QAAQ,CAAC;EAC/C;;AA3BWX,aAAa,C;mBAAbA,aAAa,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAbpB,aAAa,C;SAAbA,aAAa;EAAAqB,OAAA,EAAbrB,aAAa,CAAAsB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}